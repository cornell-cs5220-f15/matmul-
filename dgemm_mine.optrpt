
    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: sublock_dgemm(const double *__restrict__, const double *__restrict__, double *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sublock_dgemm(const double *__restrict__, const double *__restrict__, double *__restrict__)) [1/4=25.0%] dgemm_mine.c(18,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dgemm_mine.c(20,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 ) --> ( 1 3 2 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 4  

   LOOP BEGIN at dgemm_mine.c(21,9)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25436: completely unrolled by 4  

      LOOP BEGIN at dgemm_mine.c(24,13)
         remark #15389: vectorization support: reference C has unaligned access
         remark #15389: vectorization support: reference C has unaligned access
         remark #15389: vectorization support: reference A has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15427: loop was completely unrolled
         remark #15301: BLOCK WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 2.750 
         remark #15478: estimated potential speedup: 4.000 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm_mine.c(21,9)
   LOOP END

   LOOP BEGIN at dgemm_mine.c(21,9)
   LOOP END

   LOOP BEGIN at dgemm_mine.c(21,9)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: do_block(const double *__restrict__, const double *__restrict__, double *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (do_block(const double *__restrict__, const double *__restrict__, double *__restrict__)) [2/4=50.0%] dgemm_mine.c(35,1)
  -> INLINE: (44,17) sublock_dgemm(const double *__restrict__, const double *__restrict__, double *__restrict__) (isz = 97) (sz = 106)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dgemm_mine.c(37,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 4 5 6 ) --> ( 1 2 3 4 6 5 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm_mine.c(39,9)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 4 5 ) --> ( 1 2 3 5 4 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm_mine.c(42,13)
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 4 ) --> ( 1 2 4 3 ) 
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at dgemm_mine.c(20,5) inlined into dgemm_mine.c(44,17)
            remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
            remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 ) --> ( 1 3 2 ) 
            remark #15542: loop was not vectorized: inner loop was already vectorized
            remark #25436: completely unrolled by 4  

            LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(44,17)
               remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
               remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
               remark #15542: loop was not vectorized: inner loop was already vectorized
               remark #25436: completely unrolled by 4  

               LOOP BEGIN at dgemm_mine.c(24,13) inlined into dgemm_mine.c(44,17)
                  remark #15389: vectorization support: reference C_50 has unaligned access
                  remark #15389: vectorization support: reference C_50 has unaligned access
                  remark #15389: vectorization support: reference A_50 has unaligned access
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15427: loop was completely unrolled
                  remark #15301: BLOCK WAS VECTORIZED
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15451: unmasked unaligned unit stride stores: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 21 
                  remark #15477: vector loop cost: 2.750 
                  remark #15478: estimated potential speedup: 4.000 
                  remark #15479: lightweight vector operations: 6 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END
            LOOP END

            LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(44,17)
            LOOP END

            LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(44,17)
            LOOP END

            LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(44,17)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: realloc_block(const int, const double *__restrict__, double *__restrict__, const int, const int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (realloc_block(const int, const double *__restrict__, double *__restrict__, const int, const int)) [3/4=75.0%] dgemm_mine.c(57,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dgemm_mine.c(59,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm_mine.c(60,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 3.140 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm_mine.c(60,9)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: square_dgemm(const int, const double *__restrict__, const double *__restrict__, double *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (square_dgemm(const int, const double *__restrict__, const double *__restrict__, double *__restrict__)) [4/4=100.0%] dgemm_mine.c(70,1)
  -> EXTERN: (88,13) memset(void *, int, size_t)
  -> EXTERN: (94,17) memset(void *, int, size_t)
  -> EXTERN: (95,17) memset(void *, int, size_t)
  -> INLINE: (96,17) realloc_block(const int, const double *__restrict__, double *__restrict__, const int, const int) (isz = 31) (sz = 44)
  -> INLINE: (97,17) realloc_block(const int, const double *__restrict__, double *__restrict__, const int, const int) (isz = 31) (sz = 44)
  -> INLINE: (99,17) do_block(const double *__restrict__, const double *__restrict__, double *__restrict__) (isz = 158) (sz = 167)
    -> INLINE: (44,17) sublock_dgemm(const double *__restrict__, const double *__restrict__, double *__restrict__) (isz = 97) (sz = 106)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dgemm_mine.c(80,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm_mine.c(84,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm_mine.c(90,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at dgemm_mine.c(59,5) inlined into dgemm_mine.c(96,17)
            remark #25445: Loop Interchange not done due to: Data Dependencies
            remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
            remark #25447: Dependence found between following statements:  [61 -> (Output) 61]
            remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dgemm_mine.c(60,9) inlined into dgemm_mine.c(96,17)
               remark #15300: LOOP WAS VECTORIZED
               remark #15460: masked strided loads: 1 
               remark #15462: unmasked indexed (or gather) loads: 1 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 7 
               remark #15477: vector loop cost: 3.500 
               remark #15478: estimated potential speedup: 2.000 
               remark #15479: lightweight vector operations: 1 
               remark #15480: medium-overhead vector operations: 1 
               remark #15481: heavy-overhead vector operations: 1 
               remark #15488: --- end vector loop cost summary ---
               remark #25015: Estimate of max trip count of loop=52
            LOOP END

            LOOP BEGIN at dgemm_mine.c(60,9) inlined into dgemm_mine.c(96,17)
            <Remainder>
               remark #25015: Estimate of max trip count of loop=104
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm_mine.c(59,5) inlined into dgemm_mine.c(97,17)
            remark #25445: Loop Interchange not done due to: Data Dependencies
            remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
            remark #25447: Dependence found between following statements:  [61 -> (Output) 61]
            remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dgemm_mine.c(60,9) inlined into dgemm_mine.c(97,17)
               remark #15300: LOOP WAS VECTORIZED
               remark #15460: masked strided loads: 1 
               remark #15462: unmasked indexed (or gather) loads: 1 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 7 
               remark #15477: vector loop cost: 3.500 
               remark #15478: estimated potential speedup: 2.000 
               remark #15479: lightweight vector operations: 1 
               remark #15480: medium-overhead vector operations: 1 
               remark #15481: heavy-overhead vector operations: 1 
               remark #15488: --- end vector loop cost summary ---
               remark #25015: Estimate of max trip count of loop=52
            LOOP END

            LOOP BEGIN at dgemm_mine.c(60,9) inlined into dgemm_mine.c(97,17)
            <Remainder>
               remark #25015: Estimate of max trip count of loop=104
            LOOP END
         LOOP END

         LOOP BEGIN at dgemm_mine.c(37,5) inlined into dgemm_mine.c(99,17)
            remark #25101: Loop Interchange not done due to: Original Order seems proper
            remark #25452: Original Order found to be proper, but by a close margin
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dgemm_mine.c(39,9) inlined into dgemm_mine.c(99,17)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at dgemm_mine.c(42,13) inlined into dgemm_mine.c(99,17)
                  remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
                  remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 4 ) --> ( 1 2 4 3 ) 
                  remark #15542: loop was not vectorized: inner loop was already vectorized

                  LOOP BEGIN at dgemm_mine.c(20,5) inlined into dgemm_mine.c(99,17)
                     remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
                     remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 3 ) --> ( 1 3 2 ) 
                     remark #15542: loop was not vectorized: inner loop was already vectorized
                     remark #25436: completely unrolled by 4  

                     LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(99,17)
                        remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
                        remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
                        remark #15542: loop was not vectorized: inner loop was already vectorized
                        remark #25436: completely unrolled by 4  

                        LOOP BEGIN at dgemm_mine.c(24,13) inlined into dgemm_mine.c(99,17)
                           remark #15388: vectorization support: reference C_50 has aligned access
                           remark #15388: vectorization support: reference C_50 has aligned access
                           remark #15388: vectorization support: reference A_50 has aligned access
                           remark #15427: loop was completely unrolled
                           remark #15301: BLOCK WAS VECTORIZED
                           remark #15448: unmasked aligned unit stride loads: 2 
                           remark #15449: unmasked aligned unit stride stores: 1 
                           remark #15475: --- begin vector loop cost summary ---
                           remark #15476: scalar loop cost: 21 
                           remark #15477: vector loop cost: 1.750 
                           remark #15478: estimated potential speedup: 10.500 
                           remark #15479: lightweight vector operations: 7 
                           remark #15488: --- end vector loop cost summary ---
                        LOOP END
                     LOOP END

                     LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(99,17)
                     LOOP END

                     LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(99,17)
                     LOOP END

                     LOOP BEGIN at dgemm_mine.c(21,9) inlined into dgemm_mine.c(99,17)
                     LOOP END
                  LOOP END
               LOOP END
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at dgemm_mine.c(104,13)
         remark #25445: Loop Interchange not done due to: Data Dependencies
         remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
         remark #25447: Dependence found between following statements:  [106 -> (Output) 106]
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at dgemm_mine.c(105,17)
         <Multiversioned v1>
            remark #25235: Loop multiversioned to eliminate assumed dependencies
            remark #15399: vectorization support: unroll factor set to 4
            remark #15300: LOOP WAS VECTORIZED
            remark #15460: masked strided loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 2.500 
            remark #15478: estimated potential speedup: 3.570 
            remark #15479: lightweight vector operations: 1 
            remark #15480: medium-overhead vector operations: 2 
            remark #15488: --- end vector loop cost summary ---
            remark #25015: Estimate of max trip count of loop=13
         LOOP END

         LOOP BEGIN at dgemm_mine.c(105,17)
         <Remainder, Multiversioned v1>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #25015: Estimate of max trip count of loop=52
         LOOP END

         LOOP BEGIN at dgemm_mine.c(105,17)
         <Remainder, Multiversioned v1>
            remark #25015: Estimate of max trip count of loop=104
         LOOP END

         LOOP BEGIN at dgemm_mine.c(105,17)
         <Multiversioned v2>
            remark #15300: LOOP WAS VECTORIZED
            remark #15460: masked strided loads: 1 
            remark #15462: unmasked indexed (or gather) loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 9 
            remark #15477: vector loop cost: 3.500 
            remark #15478: estimated potential speedup: 2.540 
            remark #15479: lightweight vector operations: 1 
            remark #15480: medium-overhead vector operations: 1 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
            remark #25015: Estimate of max trip count of loop=52
         LOOP END

         LOOP BEGIN at dgemm_mine.c(105,17)
         <Remainder, Multiversioned v2>
            remark #25015: Estimate of max trip count of loop=104
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

dgemm_mine.c(88,13):remark #34026: call to memset implemented as a call to optimized library version
dgemm_mine.c(94,17):remark #34026: call to memset implemented as a call to optimized library version
dgemm_mine.c(95,17):remark #34026: call to memset implemented as a call to optimized library version
===========================================================================
