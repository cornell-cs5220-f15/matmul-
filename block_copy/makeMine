
#ROOT=$(pwd)

CC="icc"
FC="ifort"
LD="ifort"

# Compiler optimization flags.  You will definitely want to play with these!
OPTFLAGS="-O3 -Werror"
CFLAGS="-std=gnu99"
FFLAGS="" 
LDFLAGS="-fopenmp -nofor_main"

# Add -DDEBUG_RUN to CPPFLAGS to cut down on the cases.
#CPPFLAGS="-DCOMPILER=\"$(CC)\"" "-DFLAGS=\"$(OPTFLAGS)\""

# Compile a C version (using basic_dgemm.c, in this case):
LIBS="-lm -lirng"
OBJS="matmul.o"

# Libraries and include files for BLAS
LIBBLAS="-lopenblas"
INCBLAS=""

# Libraries and include files for BLAS
LIBMKL="-lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lpthread -lm"
INCMKL=""



PRE="job-mine"
SUFF=".pbs"




$CC -c $CFLAGS matmul.c -DDEBUGRUN
sizes=(2 4 8 16 32 64 128 256 512 1024)
for l1 in ${sizes[*]};
do 
  $CC -c $CFLAGS $OPTFLAGS dgemm_mine.c -D BLOCK_SIZE1=${l1}
  ifort -o matmul-mine_${l1} matmul.o dgemm_mine.o $LDFLAGS $LIBS

  FILE="${PRE}${l1}${SUFF}"
  
  echo "module load cs5220" >> $FILE
  echo "cd \$PBS_O_WORKDIR" >> $FILE
  echo "./matmul-mine_${l1}" >> $FILE
  qsub $FILE
  rm $FILE
done




#module load cs5220
#cd $PBS_O_WORKDIR
#
#for l1 in `seq 1 $array_len`;
#do 
#  val=${sizes[$l1]}
#  binary=matmul-mine_$val
#  ./$binary
#done
#




